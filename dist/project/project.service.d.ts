import { UserProjectEntity } from '../user/entities/user-project.entity';
import { ProjectEntity } from './project.entity';
import { OrganizationService } from '../organization/organization.service';
import { UserService } from '../user/user.service';
import { UserProjectRepository } from '../user/repository/user-project.repository';
import { OrganizationRepository } from '../organization/organization.repository';
import { ProjectRepository } from './project.repository';
import { AddProjectDTO } from './dto/add-project.dto';
import { EditProjectDTO } from './dto/edit-project.dto';
import { ProjectRO } from './ro/project.ro';
import { UserRO } from '../user/ro/user.ro';
import { RoleRepository } from '../auth/repository/role.repository';
import { AuthService } from '../auth/auth.service';
import { ActionRepository } from '../auth/repository/action.repository';
import { ResourceRepository } from '../auth/repository/resource.repository';
export declare class ProjectService {
    private readonly repo;
    private readonly orgService;
    private readonly orgRepo;
    private readonly userProjectRepo;
    private readonly userService;
    private readonly roleRepo;
    private readonly authService;
    private readonly actionRepo;
    private readonly resourceRepo;
    private readonly logger;
    constructor(repo: ProjectRepository, orgService: OrganizationService, orgRepo: OrganizationRepository, userProjectRepo: UserProjectRepository, userService: UserService, roleRepo: RoleRepository, authService: AuthService, actionRepo: ActionRepository, resourceRepo: ResourceRepository);
    getOneByCode(code: string): Promise<ProjectEntity>;
    getOneById(id: number): Promise<ProjectEntity>;
    getOneByCodeOrFail(code: string): Promise<ProjectEntity>;
    isExistPermission(actionId: number, resourceId: number, roleId: number): Promise<void>;
    mappingProjectRO(project: ProjectEntity): Promise<ProjectRO>;
    mappingListProjectRO(oldArray: ProjectEntity[]): Promise<ProjectRO[]>;
    mappingListProjectEntity(oldArray: UserProjectEntity[]): Promise<ProjectEntity[]>;
    checkProjectExist(id: number): Promise<true>;
    isProjectExist(payload: any, projectCode: string): Promise<void>;
    create(payload: any, dto: AddProjectDTO): Promise<ProjectRO>;
    addUser(payload: any, projectCode: string, id: number): Promise<UserRO>;
    getInfo(payload: any, code: string): Promise<ProjectRO>;
    getListUser(payload: any, code: string): Promise<UserRO[]>;
    getListUserByUser(payload: any, projectCode: string): Promise<UserRO[]>;
    getList(payload: any): Promise<ProjectRO[]>;
    edit(payload: any, code: string, dto: EditProjectDTO): Promise<ProjectRO>;
    delete(payload: any, code: string): Promise<number>;
    getListProject(id: number): Promise<ProjectRO[]>;
    getListAdmin(payload: any, code: string): Promise<UserRO[]>;
}
