import { UserOrganizationEntity } from './entities/user-organization.entity';
import { UserProjectEntity } from './entities/user-project.entity';
import { UserEntity } from './entities/user.entity';
import { MailService } from '../mail/mail.service';
import { UserOrganizationRepository } from './repository/user-organization.repository';
import { UserProjectRepository } from './repository/user-project.repository';
import { UserRepository } from './repository/user.repository';
import { SelfUserRO } from './ro/self-user.ro';
import { UserRO } from './ro/user.ro';
import { EditUserDTO } from './dto/edit-user.dto';
import { UserRoleRepository } from './repository/user-role.repository';
import { UserRoleEntity } from './entities/user-role.entity';
export declare class UserService {
    private readonly repo;
    private readonly mailService;
    private readonly userOrgRepo;
    private readonly userProjectRepo;
    private readonly userRoleRepo;
    private algorithm;
    private pepper;
    private readonly logger;
    constructor(repo: UserRepository, mailService: MailService, userOrgRepo: UserOrganizationRepository, userProjectRepo: UserProjectRepository, userRoleRepo: UserRoleRepository);
    isOwner(payload: any, username: string): Promise<boolean>;
    mappingSelfUserRO(user: UserEntity): Promise<SelfUserRO>;
    mappingUserRO(user: UserEntity): UserRO;
    mappingUserOrgToRO(oldArray: UserOrganizationEntity[]): Promise<UserRO[]>;
    mappingUserProjectToRO(oldArray: UserProjectEntity[]): Promise<UserRO[]>;
    mappingUserRoleToRO(oldArray: UserRoleEntity[]): Promise<UserRO[]>;
    getOneByUsername(username: string): Promise<UserEntity>;
    getOneByEmail(email: string): Promise<UserEntity>;
    getOneByEmailOrFail(email: string): Promise<UserEntity>;
    getOneById(id: number): Promise<UserEntity>;
    getOneByIdOrFail(id: number): Promise<UserEntity>;
    getListUser(projectId: number): Promise<UserRO[]>;
    getListAdmin(roleId: number): Promise<UserRO[]>;
    getListUserByDomain(payload: any): Promise<UserRO[]>;
    isSameProject(id: number, userProjectArray: UserProjectEntity[]): Promise<void>;
    getOneWithOwner(payload: any, username: string): Promise<UserRO | SelfUserRO>;
    encryptCipheriv(data: any): string;
    decryptCipheriv(hash: any): any;
    invite(payload: any): Promise<any>;
    addUser(projectId: number, id: number): Promise<UserRO>;
    joinOrg(token: any): Promise<UserOrganizationEntity>;
    edit(payload: any, id: number, dto: EditUserDTO): Promise<UserRO>;
    getRoleById(id: number): Promise<UserRoleEntity>;
}
